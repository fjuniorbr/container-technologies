name: 'Deploy Infra'

on:
  push:
    branches:
      - infra

env:
  TF_VERSION: 1.10.5
  TF_LINT_VERSION: v0.52.0
  DESTROY: false
  ENVIRONMENT: prod

jobs:
  terraform:
    name: 'Deploy Infra'
    runs-on: ubuntu-latest

  Deploy:
    needs: Build
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: View inside file ecs-task-definition.json
        run: |
          cat ./deploy/ecs-task-definition.json

      - name: Terraform | Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform | Set up statefile S3 Bucket for Backend
        run: |
            echo "terraform {
              backend \"s3\" {
                bucket   = \"${{ secrets.AWS_ACCOUNT_ID }}-tfstate\"
                key      = \"app-${{ env.ENVIRONMENT }}.tfstate\"
                region   = \"${{ vars.AWS_REGION }}\"
              }
            }" >> provider.tf
            cat provider.tf
        working-directory: ./app/deploy

      - name: Terraform | Initialize backend
        run: terraform init

      - name: Terraform | Check Syntax IaC Code
        run: terraform validate

      - name: Terraform | Plan
        run: terraform plan -out tfplan.binary

      - name: Terraform Destroy
        if: env.DESTROY == 'true'
        run: terraform destroy -auto-approve -input=false

      - name: Terraform Creating and Update
        if: env.DESTROY != 'true'
        run: terraform apply -auto-approve -input=false